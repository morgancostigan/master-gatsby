{"version":3,"sources":["../src/builder.js"],"names":["urlBuilder","validFits","validCrops","ImageUrlBuilder","parent","options","Object","assign","source","withOptions","dataset","projectId","width","height","x","y","focalPoint","maxWidth","minWidth","maxHeight","minHeight","blur","sharpen","left","top","rect","format","invert","orientation","quality","download","flipHorizontal","flipVertical","ignoreImageParams","value","indexOf","Error","fit","crop","url","clientConfig","baseUrl","apiHost","replace"],"mappings":"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","file":"builder.js","sourcesContent":["import urlForImage from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\n\nclass ImageUrlBuilder {\n  constructor(parent, options) {\n    if (parent) {\n      this.options = Object.assign({}, parent.options, options || {})\n    } else {\n      this.options = options || {}\n    }\n  }\n\n  withOptions(options) {\n    return new ImageUrlBuilder(this, options)\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify the width of the image in pixels\n  width(width) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x, y) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width, height) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left, top, width, height) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format) {\n    return this.withOptions({format})\n  }\n\n  invert(invert) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image verically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Synonym for url()\n  toString() {\n    return this.url()\n  }\n}\n\nexport default function urlBuilder(options) {\n  // Did we get a SanityClient?\n  if (options && typeof options.clientConfig === 'object') {\n    // Inherit config from client\n    return new ImageUrlBuilder(null, {\n      baseUrl: options.clientConfig.apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId: options.clientConfig.projectId,\n      dataset: options.clientConfig.dataset\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options)\n}\n"]}