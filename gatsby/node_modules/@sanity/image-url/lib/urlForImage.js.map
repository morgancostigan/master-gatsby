{"version":3,"sources":["../src/urlForImage.js"],"names":["urlForImage","SPEC_NAME_TO_URL_NAME_MAPPINGS","options","spec","Object","assign","source","image","asset","_ref","crop","left","Math","round","width","top","height","right","bottom","hotSpotVerticalRadius","hotspot","hotSpotHorizontalRadius","hotSpotCenterX","x","hotSpotCenterY","y","rect","focalPoint","ignoreImageParams","fit","specToImageUrl","cdnUrl","baseUrl","filename","id","format","projectId","dataset","params","isEffectiveCrop","push","flipHorizontal","flipVertical","forEach","mapping","specName","param","encodeURIComponent","length","join","result","desiredAspectRatio","cropAspectRatio","hotspotXCenter","hotspotYCenter","floor","parseSource"],"mappings":"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","file":"urlForImage.js","sourcesContent":["import parseSource from './parseSource'\nimport parseAssetId from './parseAssetId'\n\nconst SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop']\n]\n\nexport default function urlForImage(options) {\n  let spec = Object.assign({}, options || {})\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    return null\n  }\n\n  const asset = parseAssetId(image.asset._ref)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const crop = {\n    left: Math.round(image.crop.left * asset.width),\n    top: Math.round(image.crop.top * asset.height)\n  }\n\n  crop.width = Math.round(asset.width - image.crop.right * asset.width - crop.left)\n  crop.height = Math.round(asset.height - image.crop.bottom * asset.height - crop.top)\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotHorizontalRadius\n  }\n\n  spec.asset = asset\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = Object.assign(spec, fit({crop, hotspot}, spec))\n  }\n\n  return specToImageUrl(spec)\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const isEffectiveCrop =\n      spec.rect.left != 0 ||\n      spec.rect.top != 0 ||\n      spec.rect.height != spec.asset.height ||\n      spec.rect.width != spec.asset.width\n    if (isEffectiveCrop) {\n      params.push(`rect=${spec.rect.left},${spec.rect.top},${spec.rect.width},${spec.rect.height}`)\n    }\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-x=${spec.focalPoint.y}`)\n  }\n\n  if (spec.flipHorizontal || spec.flipVertical) {\n    params.push(`flip=${spec.flipHorizontal ? 'h' : ''}${spec.flipVertical ? 'v' : ''}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(mapping => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(source, spec) {\n  const result = {\n    width: spec.width,\n    height: spec.height\n  }\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(spec.width && spec.height)) {\n    result.rect = source.crop\n    return result\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = spec.width / spec.height\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = crop.height\n    const width = height * desiredAspectRatio\n    const top = crop.top\n    // Center output horizontally over hotspot\n    const hotspotXCenter = (hotspot.right - hotspot.left) / 2 + hotspot.left\n    let left = hotspotXCenter - width / 2\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n    result.rect = {\n      left: Math.round(left),\n      top: Math.round(top),\n      width: Math.round(width),\n      height: Math.round(height)\n    }\n    return result\n  }\n  // The crop is taller than the desired ratio, we are cutting from top and bottom\n  const width = crop.width\n  const height = width / desiredAspectRatio\n  const left = crop.left\n  // Center output vertically over hotspot\n  const hotspotYCenter = (hotspot.bottom - hotspot.top) / 2 + hotspot.top\n  let top = hotspotYCenter - height / 2\n  // Keep output rect within crop\n  if (top < crop.top) {\n    top = crop.top\n  } else if (top + height > crop.top + crop.height) {\n    top = crop.top + crop.height - height\n  }\n  result.rect = {\n    left: Math.floor(left),\n    top: Math.floor(top),\n    width: Math.round(width),\n    height: Math.round(height)\n  }\n  return result\n}\n\n// For backwards-compatibility\nexport {parseSource}\n"]}