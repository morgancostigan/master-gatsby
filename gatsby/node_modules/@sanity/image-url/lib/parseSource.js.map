{"version":3,"sources":["../src/parseSource.js"],"names":["parseSource","source","image","isUrl","asset","_ref","urlToId","_id","url","crop","hotspot","applyDefaults","test","parts","split","slice","replace","Object","assign","left","top","bottom","right","x","y","height","width"],"mappings":";;;;;;;;kBAEwBA,W;AAFxB;AACA;AACe,SAASA,WAAT,CAAqBC,MAArB,EAA6B;AAC1C,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAED,MAAIC,cAAJ;;AAEA,MAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8BE,MAAMF,MAAN,CAAlC,EAAiD;AAC/C;AACAC,YAAQ;AACNE,aAAO,EAACC,MAAMC,QAAQL,MAAR,CAAP;AADD,KAAR;AAGD,GALD,MAKO,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AACrC;AACAC,YAAQ;AACNE,aAAO,EAACC,MAAMJ,MAAP;AADD,KAAR;AAGD,GALM,MAKA,IAAI,OAAOA,OAAOI,IAAd,KAAuB,QAA3B,EAAqC;AAC1C;AACAH,YAAQ;AACNE,aAAOH;AADD,KAAR;AAGD,GALM,MAKA,IAAIA,OAAOM,GAAX,EAAgB;AACrB;AACAL,YAAQ;AACNE,aAAO;AACLC,cAAMJ,OAAOM;AADR;AADD,KAAR;AAKD,GAPM,MAOA,IAAIN,OAAOG,KAAP,IAAgBH,OAAOG,KAAP,CAAaI,GAA7B,IAAoC,CAACP,OAAOG,KAAP,CAAaC,IAAtD,EAA4D;AACjEH,YAAQ;AACNE,aAAO;AACLC,cAAMC,QAAQL,OAAOG,KAAP,CAAaI,GAArB;AADD;AADD,KAAR;AAKD,GANM,MAMA,IAAI,QAAOP,OAAOG,KAAd,MAAwB,QAA5B,EAAsC;AAC3CF,YAAQD,MAAR;AACD,GAFM,MAEA;AACL;AACA;AACA,WAAO,IAAP;AACD;;AAED,MAAIA,OAAOQ,IAAX,EAAiB;AACfP,UAAMO,IAAN,GAAaR,OAAOQ,IAApB;AACD;AACD,MAAIR,OAAOS,OAAX,EAAoB;AAClBR,UAAMQ,OAAN,GAAgBT,OAAOS,OAAvB;AACD;;AAED,SAAOC,cAAcT,KAAd,CAAP;AACD;;AAED,SAASC,KAAT,CAAeK,GAAf,EAAoB;AAClB,SAAO,gBAAeI,IAAf,MAAuBJ,GAAvB;AAAP;AACD;;AAED,SAASF,OAAT,CAAiBE,GAAjB,EAAsB;AACpB,MAAMK,QAAQL,IAAIM,KAAJ,CAAU,GAAV,EAAeC,KAAf,CAAqB,CAAC,CAAtB,CAAd;AACA,SAAO,YAASF,MAAM,CAAN,CAAT,EAAoBG,OAApB,CAA4B,aAA5B,EAA2C,KAA3C,CAAP;AACD;;AAED;AACA,SAASL,aAAT,CAAuBT,KAAvB,EAA8B;AAC5B,MAAIA,MAAMO,IAAN,IAAcP,MAAMQ,OAAxB,EAAiC;AAC/B,WAAOR,KAAP;AACD;;AAED,SAAOe,OAAOC,MAAP,CACL;AACET,UAAM;AACJU,YAAM,CADF;AAEJC,WAAK,CAFD;AAGJC,cAAQ,CAHJ;AAIJC,aAAO;AAJH,KADR;AAOEZ,aAAS;AACPa,SAAG,GADI;AAEPC,SAAG,GAFI;AAGPC,cAAQ,GAHD;AAIPC,aAAO;AAJA;AAPX,GADK,EAeLxB,KAfK,CAAP;AAiBD","file":"parseSource.js","sourcesContent":["// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source) {\n  if (!source) {\n    return null\n  }\n\n  let image\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)}\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source}\n    }\n  } else if (typeof source._ref === 'string') {\n    // We just got passed an asset directly\n    image = {\n      asset: source\n    }\n  } else if (source._id) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id\n      }\n    }\n  } else if (source.asset && source.asset.url && !source.asset._ref) {\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url)\n      }\n    }\n  } else if (typeof source.asset === 'object') {\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  if (source.crop) {\n    image.crop = source.crop\n  }\n  if (source.hotspot) {\n    image.hotspot = source.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image) {\n  if (image.crop && image.hotspot) {\n    return image\n  }\n\n  return Object.assign(\n    {\n      crop: {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      },\n      hotspot: {\n        x: 0.5,\n        y: 0.5,\n        height: 1.0,\n        width: 1.0\n      }\n    },\n    image\n  )\n}\n"]}